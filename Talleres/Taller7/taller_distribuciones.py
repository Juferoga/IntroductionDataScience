# -*- coding: utf-8 -*-
"""Taller Distribuciones.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qb0EFezkxTEYlu2Bg21YQ8xN9mzRtMSh

# 👻  **Taller 7 - Distribuciones  🧮**

<img src="https://www.udistrital.edu.co/themes/custom/versh/images/default/preloader.png" align="left" width="192px" height="192px"/>
<img align="left" width="0" height="192px" hspace="10"/>

> Juan Felipe Rodríguez Galindo  - **COD. 20181020158**
<br></br>
[![Juan Felipe Rodriguez Galindo](https://img.shields.io/badge/Juferoga-github-br?style=flat-square)](https://gitlab.com/Juferoga)
[![License](https://img.shields.io/badge/License-GPL_V.3-blue?style=flat-square)](https://www.gnu.org/licenses/gpl-3.0.html)


Introducción a la Ciencia de Datos

Desarrrollo del taller propuesto en la clase de introducción a la ciencia de datos.

## Taller

```
Seleccionar 5 distribuciones de https://numpy.org/doc/stable/reference/random/generator.html, 
graficar el histograma para varias configuraciones de los parámetros 
de cada distribución seleccionada (similar al ejemplo mostrado a continuación), 
de tal forma que se puedan sacar conclusiones sobre el efecto de esos parámetros.
```

---
### Ejemplo - Distribución Beta


---
"""

import numpy as np
from matplotlib import pyplot as plt
rng = np.random.default_rng()

a = [0.5, 5, 2, 3, 5, 1]
b = [0.5, 5, 3, 2, 1, 5]
plt.figure(figsize=(5, 5))
for i in range(6):
  beta = rng.beta(a[i],b[i], 10000)
  plt.subplot(3,2,i+1).set_title('a ='+str(a[i])+'; b ='+str(b[i]))
  plt.hist(beta)
plt.show()

"""# **DESARROLLO**
<hr>

## 1. Generador bionmial

El generador binomial, extrae una distribución binomial con los parametros admitidos por esa función.

![Formula binomial](https://numpy.org/doc/stable/_images/math/a3235d9c59e404c34cbb15d54a794631511dfbcc.svg)

```
Generator.binomial( n , p , size = none )
```
"""

# n = numero de veces que se repite el exp.
n = 3
# p = a la probabilidad que tienen de ser satisfactorio
p = [0.1, 0.2, 0.5, 0.6, 0.8,0.9]

plt.figure(figsize=(15, 10))
for i in range (len(p)):
  # se realiza la prueba 100 veces, por eso el último número
  binomial = rng.binomial(n,p[i],100)
  plt.subplot(3,2,i+1).set_title('n ='+str(n)+'; p ='+str(p[i]))
  plt.hist(binomial, color='g')
plt.show()

"""## 2. Generador Laplace

Extraiga muestras de Laplace o distribución exponencial doble con ubicación (o media) y escala (decadencia) especificadas.

![texto alternativo](https://numpy.org/doc/stable/_images/math/2ebcb3d1ffb40021d3a39dc28cdc9d1dfb377b5c.svg)

```
Generator.laplace(loc=0.0, scale=1.0, size=None)
```
"""

# l = eL valor del punto más alto de la distribución 
l = [-0.2, -0.1, 0.0, 0.1, 0.2, 0.1]
# S = la escala no puede ser negativa
s = [1, 2, 5, 6, 8, 9]

plt.figure(figsize=(15, 10))
for i in range (len(p)):
  # se realiza la prueba 100 veces, por eso el último número
  laplace = rng.laplace(l[i],s[i],100)
  plt.subplot(3,2,i+1).set_title('l ='+str(l[i])+'; s ='+str(s[i]))
  plt.hist(laplace, color = 'm')
plt.show()

"""## 3. Generador Gumbel

Dibuja muestras de una distribución Gumbel. Extrae muestras de una distribución Gumbel con ubicación y escala especificadas.

![texto alternativo](https://numpy.org/doc/stable/_images/math/88707b071abab1d5ce56af7a106e1db39d6736cb.svg)

```
Generator.gumbel(loc=0.0, scale=1.0, size=None)
```
"""

plt.figure(figsize=(15, 10))
for i in range (len(p)):
  # se realiza la prueba 100 veces, por eso el último número
  Gumbel = rng.gumbel(l[i],s[i],100)
  plt.subplot(3,2,i+1).set_title('l ='+str(l[i])+'; s ='+str(s[i]))
  plt.hist(Gumbel, color ='c')
plt.show()

"""## 4. Generador Normal

El generador Normal, extrae una serie de muestras de distribución normal con los parametros admitidos por esa función.**texto en negrita**

![texto alternativo](https://numpy.org/doc/stable/_images/math/b4a4f5ca59e5559aa092b30b98184ec0bb689b7a.svg)



```
Generator.normal(loc=0.0, scale=1.0, size=None)
```
"""

plt.figure(figsize=(15, 10))
for i in range (len(p)):
  # se realiza la prueba 100 veces, por eso el último número
  Normal = rng.normal(l[i],s[i],100)
  plt.subplot(3,2,i+1).set_title('l ='+str(l[i])+'; s ='+str(s[i]))
  plt.hist(Normal, color='r')
plt.show()

"""## 5. Generador Wald

El generador Wald, extrae una serie de muestras de distribución WAld con los parametros admitidos por esa función.

![texto alternativo](https://numpy.org/doc/stable/_images/math/ca1b35b5f88da786b826e117e4af8cc53d64bf2c.svg)

```
Generator.wald(mean, scale, size=None)
```
"""

# mean = Distribución media, debe ser> 0
m = [10 , 20 ,30, 8 , 12, 3]
# scale = Parámetro de escala, debe ser> 0.
# s

plt.figure(figsize=(15, 10))
for i in range (len(p)):
  # se realiza la prueba 100 veces, por eso el último número
  Normal = rng.normal(m[i],s[i],100)
  plt.subplot(3,2,i+1).set_title('l ='+str(l[i])+'; s ='+str(s[i]))
  plt.hist(Normal, color='k')
plt.show()

"""## 6. Generador Poisson
Dibuja muestras de una distribución de Poisson. La distribución de Poisson es el límite de la distribución binomial para grandes N.

![texto alternativo](https://numpy.org/doc/stable/_images/math/c91108ae66a9a5e2feb9442c67962868e368fdc8.svg)

```
Generator.poisson( lam = 1.0 , size = None )
```
"""

# lamda La expectativa de intervalo debe ser> = 0. 
lamb = [0, 0.13333, 3, 4, 100]
# size Forma de salida. opcional
plt.figure(figsize=(15, 10))
for i in range (len(lamb)):
  # se realiza la prueba 100 veces, por eso el último número
  poi = rng.poisson(lamb)
  plt.subplot(3,2,i+1).set_title('lambda = '+str(lamb[i]))
  plt.hist(poi)
plt.show()

"""# Observaciones

|Función|Observacion|
|---|---|
|**Random Binomial**| Cuando se cambia p cambia el eje cenral de la campana de izq. a der.|
|**Random Laplace**| Se trata de adaptar a la campana de Gauss, y segun variemos puede cambiar la posicion del eje central |
|**Random Gumbel**| En esta grafica la mayoria de valores tienden a estar en las primeras pocisiones, pero cuando se varia aumenta su espacio de tendencia |
|**Random Normal**| Cuando ponemos valores como 0.9 y 9 respectivamente se ve mas la tendencia a crear la campana, en comparacion de los otros que aumenta el rango de error |
|**Random Wald**| En este caso incurre más al error y vemos que la mejor grafica en este caso es la que se encuentra en la posición 5  |
|**Random Poisson**| No varia si siempre tiene el mismo tamaño  |

<hr>

                             Fin Taller - Taller distribuciones y matplotlib 🧮

> Juan Felipe Rodríguez Galindo  - **COD. 20181020158**
"""